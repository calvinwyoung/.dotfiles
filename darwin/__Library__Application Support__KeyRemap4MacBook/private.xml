<?xml version="1.0"?>
<root>
  <!-- For Apple Keyboards -->
  <item>
    <name>Remap Hyper/Option (Apple Keyboard)</name>
    <appendix>Map the F18 key to "Hyper" (e.g., Control + Option + Command) and F19 to Option.</appendix>
    <appendix>This requires OPTION_L to keycode 79 and COMMAND_L to keycode 80 in PCKeyboardHack.</appendix>
    <identifier>custom.apple_keyboard_remap_hyper_option</identifier>

    <device_only>
      DeviceVendor::APPLE_COMPUTER,
      DeviceProduct::ANY
    </device_only>

    <block>
      <not>VIRTUALMACHINE</not>
      <autogen>
        --KeyToKey--
        KeyCode::F18,

        KeyCode::COMMAND_L,
        ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
      </autogen>
    </block>
    <block>
      <!-- For VMs, just send the Command key -->
      <only>VIRTUALMACHINE</only>
      <autogen>
        --KeyToKey--
        KeyCode::F18,

        KeyCode::COMMAND_L
      </autogen>
    </block>
    <autogen>
      --KeyToKey--
      KeyCode::F19,

      KeyCode::OPTION_L
    </autogen>
  </item>


  <!-- For PC Keyboards -->
  <item>
    <name>Remap Hyper/Option (PC Keyboard)</name>
    <appendix>Map the F18 key to Option and F19 to "Hyper" (e.g., Control + Option + Command).</appendix>
    <appendix>This requires OPTION_L to keycode 79 and COMMAND_L to keycode 80 in PCKeyboardHack.</appendix>
    <identifier>custom.pc_keyboard_remap_hyper_option</identifier>

    <device_not>
      DeviceVendor::APPLE_COMPUTER,
      DeviceProduct::ANY
    </device_not>

    <autogen>
      --KeyToKey--
      KeyCode::F18,

      KeyCode::OPTION_L
    </autogen>

    <block>
      <not>VIRTUALMACHINE</not>
      <autogen>
        --KeyToKey--
        KeyCode::F19,

        KeyCode::COMMAND_L,
        ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L
      </autogen>
    </block>
    <block>
      <!-- For VMs, just send the Command key -->
      <only>VIRTUALMACHINE</only>
      <autogen>
        --KeyToKey--
        KeyCode::F19,

        KeyCode::COMMAND_L
      </autogen>
    </block>
  </item>

  <!-- Logitech G9 mouse config -->
  <item>
    <name>Logitech G9 Mouse Config</name>
    <identifier>custom.logitech_g9_mouse_config</identifier>
    <appendix>Mouse Back Button to Command + [</appendix>
    <appendix>ScrollRight to Command + ]</appendix>
    <appendix>ScrollLeft to Middle Click</appendix>

    <device_not>
      DeviceVendor::APPLE_COMPUTER,
      DeviceProduct::ANY
    </device_not>

    <!-- Mouse back button to "Back" -->
    <autogen>
      __PointingButtonToKey__
      PointingButton::BUTTON4, ModifierFlag::NONE,
      KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Mouse scroll wheel right to "Forward" -->
    <autogen>
      __ScrollWheelToKey__
      ScrollWheel::RIGHT, ModifierFlag::NONE,
      KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L
    </autogen>

    <!-- Mouse scroll wheel left to Middle Click -->
    <autogen>
      __ScrollWheelToKey__
      ScrollWheel::LEFT, ModifierFlag::NONE,
      KeyCode::VK_MOUSEKEY_BUTTON_MIDDLE
    </autogen>
  </item>

  <!-- Control + Left Click emulates Right Click by default, which is really
       annoying, so remap it to Command + Left Click instead.
  -->
  <item>
    <name>Control + Left Click to Command + Left Click</name>
    <identifier>custom.control_left_click_to_command_left_click</identifier>
    <appendix>Control + Left Click to Command + Left Click</appendix>

    <autogen>
      __PointingButtonToPointingButton__
      PointingButton::LEFT, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
      PointingButton::LEFT, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <!-- Emulate Linux-style moving/resizing. To be used in combination with
       Zooom2.

       Here, we use Fn is the movement modifier key for Zooom2 because it's the only
       modifier key that doesn't have any default functionality when combined with
       left-click.
  -->
  <item>
    <name>Zooom2 Support</name>
    <identifier>custom.zooom2_support</identifier>
    <appendix>Hyper + Left Click to Fn + Left Click</appendix>
    <appendix>Hyper + Right Click to Fn + Shift + Left Click</appendix>

    <!-- Hyper + Left Click to Fn + Left Click -->
    <autogen>
      __PointingButtonToPointingButton__
      PointingButton::LEFT,
      ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,

      PointingButton::LEFT,
      ModifierFlag::FN
    </autogen>

    <!-- Hyper + Right Click to Fn + Shift + Right Click -->
    <autogen>
      __PointingButtonToPointingButton__
      PointingButton::RIGHT,
      ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,

      PointingButton::LEFT,
      ModifierFlag::FN | ModifierFlag::SHIFT_L
    </autogen>
  </item>

  <!-- Command + Arrows to Page Up/Page Down/Home/End -->
  <item>
    <name>Command + Arrows to Page Up/Page Down/Home/End</name>
    <identifier>custom.command_arrows_to_page_up_page_down_home_end</identifier>
    <appendix>Command + Up to Page Up</appendix>
    <appendix>Command + Down to Page Down</appendix>
    <appendix>Command + Left to Home</appendix>
    <appendix>Command + Right to End</appendix>

    <!-- Don't enable these shortcuts in Finder/iTerm, which already have
         bindings for Command + Arrow keys. -->
    <not>FINDER</not>
    <not>TERMINAL</not>

    <autogen>
      --KeyToKey--
      KeyCode::CURSOR_UP, ModifierFlag::COMMAND_L,
      KeyCode::PAGEUP
    </autogen>
    <autogen>
      --KeyToKey--
      KeyCode::CURSOR_DOWN, ModifierFlag::COMMAND_L,
      KeyCode::PAGEDOWN
    </autogen>
    <autogen>
      --KeyToKey--
      KeyCode::CURSOR_LEFT, ModifierFlag::COMMAND_L,
      KeyCode::HOME
    </autogen>
    <autogen>
      --KeyToKey--
      KeyCode::CURSOR_RIGHT, ModifierFlag::COMMAND_L,
      KeyCode::END
    </autogen>
  </item>

  <!-- Finder: Use F2 to Rename files, and Return to open them. -->
  <item>
    <name>Finder: F2 to Rename, Return to Open</name>
    <appendix>Binds F2 to "Rename" command</appendix>
    <appendix>Binds Return to "Open" command</appendix>
    <appendix>Control + L to Command + L</appendix>
    <appendix>+ pressing Return while renaming (via F2) saves the new name instead of opening</appendix>
    <identifier>custom.app_finder_switch_open_rename</identifier>
    <only>FINDER</only>
    <autogen>
      __KeyToKey__
      KeyCode::F2,

      KeyCode::RETURN, KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
    <autogen>
      <!-- Also make this work with the Brightness Up key. -->
      __ConsumerToKey__
      ConsumerKeyCode::BRIGHTNESS_UP,

      KeyCode::RETURN, KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::RETURN, ModifierFlag::NONE,

      KeyCode::O, ModifierFlag::COMMAND_L, Option::NOREPEAT
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,

      KeyCode::L, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::N,  ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_L,

      KeyCode::N, ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_L,
      KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::N,  ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_R,

      KeyCode::N, ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_L,
      KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::N,  ModifierFlag::COMMAND_R |  ModifierFlag::SHIFT_L,

      KeyCode::N, ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_L,
      KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::N,  ModifierFlag::COMMAND_R |  ModifierFlag::SHIFT_R,

      KeyCode::N, ModifierFlag::COMMAND_L |  ModifierFlag::SHIFT_L,
      KeyCode::VK_CONFIG_TOGGLE_notsave_app_finder_return_accepts_rename
    </autogen>
  </item>

  <!-- Browsers: Control-based Browser Shortcuts -->
  <item>
    <name>Browsers: Control-based Browser Shortcuts</name>
    <appendix>Ctrl + T to Command + T</appendix>
    <appendix>Ctrl + L to Command + L</appendix>
    <appendix>Ctrl + R to Command + R</appendix>
    <appendix>Ctrl + [1-9] to Command + [1-9]</appendix>
    <identifier>custom.control_based_browser_shortcuts</identifier>

    <only>SAFARI,FIREFOX,THUNDERBIRD,GOOGLE_CHROME,OPERA</only>

    <autogen>
      __KeyToKey__
      KeyCode::T, ModifierFlag::CONTROL_L,

      KeyCode::T, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::L, ModifierFlag::CONTROL_L,

      KeyCode::L, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::R, ModifierFlag::CONTROL_L,

      KeyCode::R, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_1, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_1, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_2, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_2, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_3, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_3, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_4, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_4, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_5, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_5, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_6, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_6, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_7, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_7, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_8, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_8, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_9, ModifierFlag::CONTROL_L | ModifierFlag::NONE,

      KeyCode::KEY_9, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <!-- Control-based Zooming -->
  <item>
    <name>Control-based Zooming</name>
    <appendix>Ctrl + [+/-/0] to Command + [+/-/0]</appendix>
    <appendix>Ctrl + ScrollWheel to Command + [+/-]</appendix>
    <identifier>custom.control_based_zooming</identifier>

    <autogen>
      __KeyToKey__
      KeyCode::EQUAL, ModifierFlag::CONTROL_L,

      KeyCode::EQUAL, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::MINUS, ModifierFlag::CONTROL_L,

      KeyCode::MINUS, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::KEY_0, ModifierFlag::CONTROL_L,

      KeyCode::KEY_0, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __ScrollWheelToKey__
      ScrollWheel::UP, ModifierFlag::CONTROL_L,

      KeyCode::EQUAL, ModifierFlag::COMMAND_L
    </autogen>
    <autogen>
      __ScrollWheelToKey__
      ScrollWheel::DOWN, ModifierFlag::CONTROL_L,

      KeyCode::MINUS, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <!-- Move window to space -->
  <item>
   <name>Move window to space</name>
   <appendix>Moves window to spaces with Shift + Hyper + #.</appendix>
   <appendix>NOTE: Requires binding F17 to "Move cursor to titlebar w/ Keyboard Maestro.</appendix>
   <identifier>custom.mission_control_hacks</identifier>
   <autogen>
     __KeyToKey__
     KeyCode::KEY_1, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L,

     KeyCode::F17,
     KeyCode::VK_WAIT_100MS,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
     KeyCode::KEY_1, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
   </autogen>
   <autogen>
     __KeyToKey__
     KeyCode::KEY_2, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L,

     KeyCode::F17,
     KeyCode::VK_WAIT_100MS,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
     KeyCode::KEY_2, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
   </autogen>
   <autogen>
     __KeyToKey__
     KeyCode::KEY_3, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L,

     KeyCode::F17,
     KeyCode::VK_WAIT_100MS,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
     KeyCode::KEY_3, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
   </autogen>
   <autogen>
     __KeyToKey__
     KeyCode::KEY_4, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L,

     KeyCode::F17,
     KeyCode::VK_WAIT_100MS,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
     KeyCode::KEY_4, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::CONTROL_L,
     KeyCode::VK_MOUSEKEY_LOCK_BUTTON_LEFT,
   </autogen>
  </item>

  <!--
      Shift + Hyper + Comma/Period to Left/Right Brackets

      By default the Shift + Hyper + Comma/Period keyboard shortcuts activate
      sysdiagnose, but we want to use them to move windows between screens (a la
      AwesomeWM, DWM, etc.) Slate can't seem to bind to these shortcuts on its
      own, but KeyRemap4MacBook can. As a workaround, we have Slate bind to the
      Shift + Hyper + Left/Right Bracket shortcuts, and we use KeyRemap4MacBook
      to map from Comma/Period to the Left/Right Bracket.
  -->
  <item>
    <name>Shift + Hyper + Comma/Period to Left/Right Brackets</name>
    <appendix>Workaround for binding sysdiagnose shortcuts to move window between screens.</appendix>
    <identifier>custom.override_sysdiagnose_shortcuts</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::COMMA,
      ModifierFlag::COMMAND_L | ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,

      KeyCode::BRACKET_LEFT,
      ModifierFlag::COMMAND_L | ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,
    </autogen>
    <autogen>
      __KeyToKey__
      KeyCode::DOT,
      ModifierFlag::COMMAND_L | ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,

      KeyCode::BRACKET_RIGHT,
      ModifierFlag::COMMAND_L | ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L,
    </autogen>
  </item>

  <!-- Hyper + D to Show Desktop -->
  <item>
    <name>Hyper + D to Show Desktop</name>
    <identifier>custom.hyper_d_to_show_desktop</identifier>

    <autogen>
      __KeyToKey__
      KeyCode::D, ModifierFlag::COMMAND_L | ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L,

      KeyCode::EXPOSE_ALL, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <!-- Control + Option + W to Command + W -->
  <item>
    <name>Control + Option + W to Command + W</name>
    <identifier>custom.control_option_w_to_command_w</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::W, ModifierFlag::CONTROL_L | ModifierFlag::OPTION_L | ModifierFlag::NONE,

      KeyCode::W, ModifierFlag::COMMAND_L
    </autogen>
  </item>

  <!-- Simultaneously pressing Left Shift + Right Shift activates Caps Lock -->
  <item>
    <name>Simultaneous Key Presses [Shift_L+Shift_R] to Caps Lock</name>
    <identifier>custom.simultaneouskeypresses_ss_to_capslock</identifier>
    <autogen>
      __SimultaneousKeyPresses__
      KeyCode::SHIFT_L, KeyCode::SHIFT_R,
      KeyCode::CAPSLOCK
    </autogen>
  </item>

  <!-- Pause/Break to Eject -->
  <item>
    <name>Pause/Break Key to Eject</name>
    <identifier>custom.pause_break_to_eject</identifier>
    <autogen>
      __KeyToConsumer__
      KeyCode::PC_PAUSE,
      ConsumerKeyCode::EJECT
    </autogen>
  </item>

  <!-- Fn to Command -->
  <item>
    <name>Fn to Command</name>
    <identifier>custom.fn_to_command</identifier>
    <autogen>
      __KeyToKey__
      KeyCode::FN,
      KeyCode::COMMAND_L
    </autogen>
  </item>
</root>
